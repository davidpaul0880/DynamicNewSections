//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the ZCo Swift Xcode Templates
//

import UIKit
class ___VARIABLE_sceneName___UIController: NSObject {
    fileprivate unowned var tableView: UITableView
    fileprivate var kbManager: ZCOKeyboardManager!
    weak var eventHandler: ___VARIABLE_sceneName____HandleCellUIEvents!
    fileprivate var dataSource: [___VARIABLE_sceneName___.InputField] = [] {
        didSet { tableView.reloadData() }
    }
    required init(_ tableView: UITableView, eventHandler: ___VARIABLE_sceneName____HandleCellUIEvents) {
        //self.eventHandler = eventHandler
        self.tableView = tableView
        self.eventHandler = eventHandler
    }
    // MARK: - UIController
    func initialize() {
        tableView.delegate = self
        tableView.dataSource = self
        //keyboard setup
        kbManager = ZCOKeyboard(containerScrollView: tableView, textFieldDelegate: self)
    }
    func viewWillAppear() {
        kbManager.registerKeyboardEvents()
    }
    func viewWillDisAppear() {
        kbManager.deRegisterKeyboardEvents()
    }
    func dismissKeyboard() {
        kbManager.dismissKeyboard()
    }
    deinit {
        printDebug("\(String(describing: self)) is being deInitialized.")
    }
    func loadInputFields(_ fields: [___VARIABLE_sceneName___.InputField]) {
        dataSource = fields
    }
}
// MARK: - UITextFieldDelegate
extension ___VARIABLE_sceneName___UIController: UITextFieldDelegate {
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        guard let fieldType = ___VARIABLE_sceneName___.InputType(rawValue: textField.tag) else {
            return true
        }
        textField.setKeyboardTypeFor(fieldType)
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        kbManager.didEndEditing(textField)
        if let fieldType = ___VARIABLE_sceneName___.InputType(rawValue: textField.tag) {
            var updatedString = textField.text?.trim()
            self.eventHandler.setValue(updatedString, inputType: fieldType)
        }
        return
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        kbManager.didBeginEditing(textField, isShowToolbar: false)
    }
    // called when 'return' key pressed. return NO to ignore.
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        kbManager.textFieldShouldReturn()
        return true
    }
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard let fieldType = ___VARIABLE_sceneName___.InputType(rawValue: textField.tag) else {
            return false
        }
        let updatedString = (textField.text as NSString?)?.replacingCharacters(in: range, with: string)
        return true
    }
}
// MARK: - UITableViewDataSource,UITableViewDelegate
extension ___VARIABLE_sceneName___UIController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let fieldType = ___VARIABLE_sceneName___.InputType(rawValue: indexPath.row) else {
            fatalError()
        }
        switch fieldType {
        case .email:
            let cell: ___VARIABLE_cellName___TableViewCell = tableView.dequeueReusableCell(indexPath: indexPath)
            cell.cellController = dataSource[indexPath.row]
            cell.inputTextField.delegate = self
            cell.setTextValue(eventHandler?.getValueFor(dataSource[indexPath.row].inputType))
            return cell
        }
    }
}
